// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RemoteControllerMaster.Database;

#nullable disable

namespace RemoteControllerMaster.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527203626_AddAnalisColumns")]
    partial class AddAnalisColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.AuthorizeToken", b =>
                {
                    b.Property<Guid>("AuthorizeTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("authorize_token_id");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("AuthorizeTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("authorize_tokens", "core");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.Command", b =>
                {
                    b.Property<Guid>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("command_id");

                    b.Property<string>("AdditionalInformationText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_information_text");

                    b.Property<string>("CommandText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("command_text");

                    b.Property<int>("CommandType")
                        .HasColumnType("integer")
                        .HasColumnName("command_type");

                    b.HasKey("CommandId");

                    b.HasIndex("CommandType");

                    b.ToTable("commands", "core");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.Command2Permission", b =>
                {
                    b.Property<Guid>("CommandId")
                        .HasColumnType("uuid")
                        .HasColumnName("command_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.HasKey("CommandId", "Permission");

                    b.HasIndex("Permission");

                    b.ToTable("commands_permissions", "core");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.CommandType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("command_types", "enum");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.Machine", b =>
                {
                    b.Property<Guid>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("machine_id");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("machine_name");

                    b.HasKey("MachineId");

                    b.ToTable("machines", "core");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("permissions", "enum");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.Statistic", b =>
                {
                    b.Property<Guid>("StatisticId")
                        .HasColumnType("uuid")
                        .HasColumnName("statistic_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machine_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<string>("Variable")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("variable");

                    b.HasKey("StatisticId", "Date");

                    b.HasIndex("MachineId");

                    b.ToTable("statistics", "analytics");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password_hash");

                    b.HasKey("UserId");

                    b.ToTable("users", "core");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.User2Machine", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("MachineId")
                        .HasColumnType("uuid")
                        .HasColumnName("machine_id");

                    b.HasKey("UserId", "MachineId");

                    b.HasIndex("MachineId");

                    b.ToTable("users_machines", "core");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.User2Permission", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Permission")
                        .HasColumnType("integer")
                        .HasColumnName("permission");

                    b.HasKey("UserId", "Permission");

                    b.HasIndex("Permission");

                    b.ToTable("users_permissions", "core");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.UserLog", b =>
                {
                    b.Property<Guid>("UserLogId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_log_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("request");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("response");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("UserLogId", "CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("user_logs", "analytics");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.AuthorizeToken", b =>
                {
                    b.HasOne("RemoteControllerMaster.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_authorize_tokens_user_id");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.Command", b =>
                {
                    b.HasOne("RemoteControllerMaster.Database.Models.CommandType", null)
                        .WithMany()
                        .HasForeignKey("CommandType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.Command2Permission", b =>
                {
                    b.HasOne("RemoteControllerMaster.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("CommandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteControllerMaster.Database.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("Permission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.Statistic", b =>
                {
                    b.HasOne("RemoteControllerMaster.Database.Models.Machine", null)
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_statistics_machines_machine_id");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.User2Machine", b =>
                {
                    b.HasOne("RemoteControllerMaster.Database.Models.Machine", null)
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RemoteControllerMaster.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.User2Permission", b =>
                {
                    b.HasOne("RemoteControllerMaster.Database.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("Permission")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_users_permissions_Permission");

                    b.HasOne("RemoteControllerMaster.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_users_permissions_User_id");
                });

            modelBuilder.Entity("RemoteControllerMaster.Database.Models.UserLog", b =>
                {
                    b.HasOne("RemoteControllerMaster.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
